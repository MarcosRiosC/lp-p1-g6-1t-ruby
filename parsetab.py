
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AND_LOGIC BEGIN BREAK CASE CLASS COINCIDENCE COMMA COMPOSITION CONSTANT DEF DIVIDE DO DOUBLE_QUOTE ELIF ELSE END ENSURE EQUAL EQUALITY EQUALITY_OF_CASE EXPONENT FALSE FOR GREATER_EQUAL GREATER_THAN IF IN L_PAREN MINUS MODULE MULTIPLICATION NEGATION NIL NOT NUMBER OR OR_LOGIC PLUS QUOTATION_MARK RESCUE RETRY RETURN R_PAREN SMALLER_EQUAL SMALLER_THAN THEN TRUE UNLESS UNTIL VARIABLE_CLASS VARIABLE_GLOBAL VARIABLE_INSTANCE VARIABLE_LOCAL WHEN WHILE WRENCH_L WRENCH_Rsentencia : funcionfuncion : DEF VARIABLE_LOCAL L_PAREN variables R_PAREN ENDvariables : VARIABLE_LOCAL\n                | VARIABLE_LOCAL COMMA variables'
    
_lr_action_items = {'DEF':([0,],[3,]),'$end':([1,2,11,],[0,-1,-2,]),'VARIABLE_LOCAL':([3,5,8,],[4,6,6,]),'L_PAREN':([4,],[5,]),'R_PAREN':([6,7,10,],[-3,9,-4,]),'COMMA':([6,],[8,]),'END':([9,],[11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'sentencia':([0,],[1,]),'funcion':([0,],[2,]),'variables':([5,8,],[7,10,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> sentencia","S'",1,None,None,None),
  ('sentencia -> funcion','sentencia',1,'p_sentencia','Analizador_Sintactico.py',9),
  ('funcion -> DEF VARIABLE_LOCAL L_PAREN variables R_PAREN END','funcion',6,'p_funcion','Analizador_Sintactico.py',13),
  ('variables -> VARIABLE_LOCAL','variables',1,'p_variables','Analizador_Sintactico.py',16),
  ('variables -> VARIABLE_LOCAL COMMA variables','variables',3,'p_variables','Analizador_Sintactico.py',17),
]
